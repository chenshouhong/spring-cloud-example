<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.erdaoya</groupId>
    <artifactId>spring-cloud-example-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>cloud-project-dependencies</module>
        <module>cloud-common-exception</module>
        <module>cloud-common-mvc-custom</module>
        <module>cloud-common-actuator-maven</module>

        <module>cloud-server-discovery</module>
        <module>cloud-server-config</module>

        <module>cloud-admin-ui</module>
        <module>cloud-turbine-dashboard</module>
        <module>cloud-zipkin-ui</module>

        <module>cloud-service-comx</module>
        <module>cloud-service-trade</module>
        <module>cloud-service-user</module>
        <module>cloud-api-gateway</module>
    </modules>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>

        <!--plugin version-->
        <docker.plugin.version>0.4.13</docker.plugin.version>
        <resources.plugin.version>3.0.2</resources.plugin.version>

        <!--docker config-->
        <docker.repo>registry2.io:5000</docker.repo>
        <!--<docker.image.prefix>${docker.repo}/erdaoya</docker.image.prefix>-->
        <docker.image.prefix>erdaoya</docker.image.prefix>

    </properties>
    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!--maven deploy repositories config-->
    <!--
    <distributionManagement>
        <repository>
            <id>Nexus-releases</id>
            <name>Team Nexus Repository releases</name>
            <url>http://192.168.99.100:8080/nexus/content/repositories/releases/</url>
        </repository>
        <snapshotRepository>
            <id>Nexus-snapshots</id>
            <name>Team Nexus Repository snapshots</name>
            <url>http://192.168.99.100:8080/nexus/content/repositories/snapshots/</url>
        </snapshotRepository>
    </distributionManagement>-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.erdaoya</groupId>
                <artifactId>cloud-project-dependencies</artifactId>
                <version>1.0-SNAPSHOT</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>1.5.2.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Dalston.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <repositories>
        <repository>
            <id>spring-releases</id>
            <name>Spring Releases</name>
            <url>https://repo.spring.io/libs-release-local</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.2.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <verbose>true</verbose>
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <dateFormat>yyyy-MM-dd '@' HH:mm:ss z</dateFormat>
                    <failOnNoGitDirectory>false</failOnNoGitDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>resolve</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>resolve</goal>
                        </goals>
                        <configuration>
                            <outputFile>${project.build.outputDirectory}/maven-resolve.properties</outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <goals>
                                <goal>build-info</goal>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${resources.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>prepare-dockerfile</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}/docker</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${project.basedir}/src/main/docker</directory>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${docker.plugin.version}</version>

                    <executions>
                        <execution>
                            <id>build-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>build</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>tag-image</id>
                            <phase>package</phase>
                            <goals>
                                <goal>tag</goal>
                            </goals>
                            <configuration>
                                <image>${docker.image.prefix}/${project.artifactId}</image>
                                <newName>${docker.image.prefix}/${project.artifactId}</newName>
                                <forceTags>true</forceTags>
                            </configuration>
                        </execution>
                        <execution>
                            <id>push-image</id>
                            <phase>install</phase>
                            <goals>
                                <goal>push</goal>
                            </goals>
                            <configuration>
                                <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                            </configuration>
                        </execution>
                    </executions>
                    <configuration>
                        <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                        <imageTags>
                            <imageTag>${project.version}</imageTag>
                            <imageTag>latest</imageTag>
                        </imageTags>
                        <forceTags>true</forceTags>
                        <dockerDirectory>${project.build.directory}/docker</dockerDirectory>
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                                <filtering>true</filtering>
                            </resource>
                        </resources>
                        <!-- 解决Connect to localhost:2375的问题的其中一种方式，注意要跟docker-machine env相一致 -->
                        <dockerHost>https://192.168.99.100:2376</dockerHost>
                        <dockerCertPath>C:\Users\luzhiwei\.docker\machine\machines\default</dockerCertPath>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
